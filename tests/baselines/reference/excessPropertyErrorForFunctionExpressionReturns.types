=== tests/cases/compiler/excessPropertyErrorForFunctionExpressionReturns.ts ===
export type SomeObj1 = { a: number, b: number };
>SomeObj1 : SomeObj1
>a : number
>b : number

declare function valueOrGetter<T>(x: T, f: () => T): T;
>valueOrGetter : <T>(x: T, f: () => T) => T
>x : T
>f : () => T

namespace arrows {
>arrows : typeof arrows

    declare function consumeObj1(f: () => SomeObj1): void;
>consumeObj1 : (f: () => SomeObj1) => void
>f : () => SomeObj1

    consumeObj1(() => ({
>consumeObj1(() => ({        a: 100,        b: 200,        c: 300,    })) : void
>consumeObj1 : (f: () => SomeObj1) => void
>() => ({        a: 100,        b: 200,        c: 300,    }) : () => { a: number; b: number; c: number; }
>({        a: 100,        b: 200,        c: 300,    }) : { a: number; b: number; c: number; }
>{        a: 100,        b: 200,        c: 300,    } : { a: number; b: number; c: number; }

        a: 100,
>a : number
>100 : 100

        b: 200,
>b : number
>200 : 200

        c: 300,
>c : number
>300 : 300

    }));
    
    function obj1FactoryFactory(): () => SomeObj1 {
>obj1FactoryFactory : () => () => SomeObj1

        return () => ({
>() => ({            a: 100,            b: 200,            c: 300,        }) : () => { a: number; b: number; c: number; }
>({            a: 100,            b: 200,            c: 300,        }) : { a: number; b: number; c: number; }
>{            a: 100,            b: 200,            c: 300,        } : { a: number; b: number; c: number; }

            a: 100,
>a : number
>100 : 100

            b: 200,
>b : number
>200 : 200

            c: 300,
>c : number
>300 : 300

        });
    }

    valueOrGetter({ a: 100, b: 200 }, () => ({
>valueOrGetter({ a: 100, b: 200 }, () => ({        a: 100,        b: 200,        c: 300,    })) : { a: number; b: number; c?: undefined; } | { a: number; b: number; c: number; }
>valueOrGetter : <T>(x: T, f: () => T) => T
>{ a: 100, b: 200 } : { a: number; b: number; }
>a : number
>100 : 100
>b : number
>200 : 200
>() => ({        a: 100,        b: 200,        c: 300,    }) : () => { a: number; b: number; c: number; }
>({        a: 100,        b: 200,        c: 300,    }) : { a: number; b: number; c: number; }
>{        a: 100,        b: 200,        c: 300,    } : { a: number; b: number; c: number; }

        a: 100,
>a : number
>100 : 100

        b: 200,
>b : number
>200 : 200

        c: 300,
>c : number
>300 : 300

    }));

    valueOrGetter<SomeObj1>({ a: 100, b: 200, c: 300 }, () => ({
>valueOrGetter<SomeObj1>({ a: 100, b: 200, c: 300 }, () => ({        a: 100,        b: 200,    })) : SomeObj1
>valueOrGetter : <T>(x: T, f: () => T) => T
>{ a: 100, b: 200, c: 300 } : { a: number; b: number; c: number; }
>a : number
>100 : 100
>b : number
>200 : 200
>c : number
>300 : 300
>() => ({        a: 100,        b: 200,    }) : () => { a: number; b: number; }
>({        a: 100,        b: 200,    }) : { a: number; b: number; }
>{        a: 100,        b: 200,    } : { a: number; b: number; }

        a: 100,
>a : number
>100 : 100

        b: 200,
>b : number
>200 : 200

    }));

    valueOrGetter<SomeObj1>({ a: 100, b: 200 }, () => ({
>valueOrGetter<SomeObj1>({ a: 100, b: 200 }, () => ({        a: 100,        b: 200,        c: 300,    })) : SomeObj1
>valueOrGetter : <T>(x: T, f: () => T) => T
>{ a: 100, b: 200 } : { a: number; b: number; }
>a : number
>100 : 100
>b : number
>200 : 200
>() => ({        a: 100,        b: 200,        c: 300,    }) : () => { a: number; b: number; c: number; }
>({        a: 100,        b: 200,        c: 300,    }) : { a: number; b: number; c: number; }
>{        a: 100,        b: 200,        c: 300,    } : { a: number; b: number; c: number; }

        a: 100,
>a : number
>100 : 100

        b: 200,
>b : number
>200 : 200

        c: 300,
>c : number
>300 : 300

    }));

    valueOrGetter({ a: 100, b: 200, c: 300 }, () => ({
>valueOrGetter({ a: 100, b: 200, c: 300 }, () => ({        a: 100,        b: 200,    })) : { a: number; b: number; c: number; } | { a: number; b: number; c?: undefined; }
>valueOrGetter : <T>(x: T, f: () => T) => T
>{ a: 100, b: 200, c: 300 } : { a: number; b: number; c: number; }
>a : number
>100 : 100
>b : number
>200 : 200
>c : number
>300 : 300
>() => ({        a: 100,        b: 200,    }) : () => { a: number; b: number; }
>({        a: 100,        b: 200,    }) : { a: number; b: number; }
>{        a: 100,        b: 200,    } : { a: number; b: number; }

        a: 100,
>a : number
>100 : 100

        b: 200,
>b : number
>200 : 200

    }));
}

namespace funcExprs {
>funcExprs : typeof funcExprs

    declare function consumeObj1(f: () => SomeObj1): void;
>consumeObj1 : (f: () => SomeObj1) => void
>f : () => SomeObj1

    consumeObj1(function() {
>consumeObj1(function() {        return {            a: 100,            b: 200,            c: 300,        };    }) : void
>consumeObj1 : (f: () => SomeObj1) => void
>function() {        return {            a: 100,            b: 200,            c: 300,        };    } : () => { a: number; b: number; c: number; }

        return {
>{            a: 100,            b: 200,            c: 300,        } : { a: number; b: number; c: number; }

            a: 100,
>a : number
>100 : 100

            b: 200,
>b : number
>200 : 200

            c: 300,
>c : number
>300 : 300

        };
    });
    
    function obj1FactoryFactory(): () => SomeObj1 {
>obj1FactoryFactory : () => () => SomeObj1

        return function() {
>function() {            return {                a: 100,                b: 200,                c: 300,            }        } : () => { a: number; b: number; c: number; }

            return {
>{                a: 100,                b: 200,                c: 300,            } : { a: number; b: number; c: number; }

                a: 100,
>a : number
>100 : 100

                b: 200,
>b : number
>200 : 200

                c: 300,
>c : number
>300 : 300
            }
        };
    }

    valueOrGetter({ a: 100, b: 200 }, function() {
>valueOrGetter({ a: 100, b: 200 }, function() {        return {            a: 100,            b: 200,            c: 300,        };    }) : { a: number; b: number; c?: undefined; } | { a: number; b: number; c: number; }
>valueOrGetter : <T>(x: T, f: () => T) => T
>{ a: 100, b: 200 } : { a: number; b: number; }
>a : number
>100 : 100
>b : number
>200 : 200
>function() {        return {            a: 100,            b: 200,            c: 300,        };    } : () => { a: number; b: number; c: number; }

        return {
>{            a: 100,            b: 200,            c: 300,        } : { a: number; b: number; c: number; }

            a: 100,
>a : number
>100 : 100

            b: 200,
>b : number
>200 : 200

            c: 300,
>c : number
>300 : 300

        };
    });

    valueOrGetter<SomeObj1>({ a: 100, b: 200, c: 300 }, function() {
>valueOrGetter<SomeObj1>({ a: 100, b: 200, c: 300 }, function() {        return {            a: 100,            b: 200,            c: 300,        };    }) : SomeObj1
>valueOrGetter : <T>(x: T, f: () => T) => T
>{ a: 100, b: 200, c: 300 } : { a: number; b: number; c: number; }
>a : number
>100 : 100
>b : number
>200 : 200
>c : number
>300 : 300
>function() {        return {            a: 100,            b: 200,            c: 300,        };    } : () => { a: number; b: number; c: number; }

        return {
>{            a: 100,            b: 200,            c: 300,        } : { a: number; b: number; c: number; }

            a: 100,
>a : number
>100 : 100

            b: 200,
>b : number
>200 : 200

            c: 300,
>c : number
>300 : 300

        };
    });

    valueOrGetter<SomeObj1>({ a: 100, b: 200 }, function() {
>valueOrGetter<SomeObj1>({ a: 100, b: 200 }, function() {        return {            a: 100,            b: 200,            c: 300,        };    }) : SomeObj1
>valueOrGetter : <T>(x: T, f: () => T) => T
>{ a: 100, b: 200 } : { a: number; b: number; }
>a : number
>100 : 100
>b : number
>200 : 200
>function() {        return {            a: 100,            b: 200,            c: 300,        };    } : () => { a: number; b: number; c: number; }

        return {
>{            a: 100,            b: 200,            c: 300,        } : { a: number; b: number; c: number; }

            a: 100,
>a : number
>100 : 100

            b: 200,
>b : number
>200 : 200

            c: 300,
>c : number
>300 : 300

        };
    });

    valueOrGetter({ a: 100, b: 200, c: 300 }, function() {
>valueOrGetter({ a: 100, b: 200, c: 300 }, function() {        return {            a: 100,            b: 200,            c: 300,        };    }) : { a: number; b: number; c: number; }
>valueOrGetter : <T>(x: T, f: () => T) => T
>{ a: 100, b: 200, c: 300 } : { a: number; b: number; c: number; }
>a : number
>100 : 100
>b : number
>200 : 200
>c : number
>300 : 300
>function() {        return {            a: 100,            b: 200,            c: 300,        };    } : () => { a: number; b: number; c: number; }

        return {
>{            a: 100,            b: 200,            c: 300,        } : { a: number; b: number; c: number; }

            a: 100,
>a : number
>100 : 100

            b: 200,
>b : number
>200 : 200

            c: 300,
>c : number
>300 : 300

        };
    });
}
