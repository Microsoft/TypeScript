=== tests/cases/compiler/a.mjs ===
// `.mjs` files are automatically external modules, and thus in strict mode

var a = {
>a : Symbol(a, Decl(a.mjs, 2, 3))

    a: "hello", // error
>a : Symbol(a, Decl(a.mjs, 2, 9), Decl(a.mjs, 4, 10))

    b: 10,
>b : Symbol(b, Decl(a.mjs, 3, 15))

    a: 10 // error
>a : Symbol(a, Decl(a.mjs, 2, 9), Decl(a.mjs, 4, 10))

};
var let = 10; // error
>let : Symbol(let, Decl(a.mjs, 7, 3))

delete a; // error
>a : Symbol(a, Decl(a.mjs, 2, 3))

try {
} catch (eval) { // error
>eval : Symbol(eval, Decl(a.mjs, 10, 9))
}
function arguments() { // error
>arguments : Symbol(arguments, Decl(a.mjs, 11, 1))
}

with (a) {
>a : Symbol(a, Decl(a.mjs, 2, 3))

    b = 10;
}

=== tests/cases/compiler/b.mjs ===
class c {
>c : Symbol(c, Decl(b.mjs, 0, 0))

    a(eval) { //error
>a : Symbol(c.a, Decl(b.mjs, 0, 9))
>eval : Symbol(eval, Decl(b.mjs, 1, 6))
    }
    method() {
>method : Symbol(c.method, Decl(b.mjs, 2, 5))

        var let = 10; // error
>let : Symbol(let, Decl(b.mjs, 4, 11))
    }
}

=== tests/cases/compiler/c.mjs ===
var let = 10;
>let : Symbol(let, Decl(c.mjs, 0, 3))

var eval = function () {
>eval : Symbol(eval, Decl(c.mjs, 1, 3))

};

=== tests/cases/compiler/d.mjs ===
var x = 009; // error
>x : Symbol(x, Decl(d.mjs, 0, 3))

