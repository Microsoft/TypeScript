=== tests/cases/conformance/enums/spreadEnum3.ts ===
enum LiteralEnum1 {
>LiteralEnum1 : LiteralEnum1

    A,
>A : LiteralEnum1.A

    B,
>B : LiteralEnum1.B

    C
>C : LiteralEnum1.C
}

enum LiteralEnum2 {
>LiteralEnum2 : LiteralEnum2

    A = 1,
>A : LiteralEnum2.A
>1 : 1

    B = 2,
>B : LiteralEnum2.B
>2 : 2

    C = 3
>C : LiteralEnum2.C
>3 : 3
}

enum LiteralEnum3 {
>LiteralEnum3 : LiteralEnum3

    A = 'A' + 'A',
>A : LiteralEnum3.A
>'A' + 'A' : string
>'A' : "A"
>'A' : "A"

    B = 'B' + 'B'
>B : LiteralEnum3.B
>'B' + 'B' : string
>'B' : "B"
>'B' : "B"
}

enum NumericEnum1 {
>NumericEnum1 : NumericEnum1

    A = 1 + 1,
>A : NumericEnum1
>1 + 1 : number
>1 : 1
>1 : 1

    B = 2 + 1,
>B : NumericEnum1
>2 + 1 : number
>2 : 2
>1 : 1

    C = 3 + 1
>C : NumericEnum1
>3 + 1 : number
>3 : 3
>1 : 1
}

enum NumericEnum2 {
>NumericEnum2 : NumericEnum2

    A = LiteralEnum1.A,
>A : NumericEnum2
>LiteralEnum1.A : LiteralEnum1
>LiteralEnum1 : typeof LiteralEnum1
>A : LiteralEnum1

    B = LiteralEnum2.B
>B : NumericEnum2
>LiteralEnum2.B : LiteralEnum2
>LiteralEnum2 : typeof LiteralEnum2
>B : LiteralEnum2
}

enum NumericEnum3 {
>NumericEnum3 : NumericEnum3

    ['A'] = LiteralEnum1.A,
>['A'] : NumericEnum3
>'A' : "A"
>LiteralEnum1.A : LiteralEnum1
>LiteralEnum1 : typeof LiteralEnum1
>A : LiteralEnum1

    ['B'] = LiteralEnum2.B
>['B'] : NumericEnum3
>'B' : "B"
>LiteralEnum2.B : LiteralEnum2
>LiteralEnum2 : typeof LiteralEnum2
>B : LiteralEnum2
}

const enum ConstEnum {
>ConstEnum : ConstEnum

    A = 'A',
>A : ConstEnum.A
>'A' : "A"

    B = 'B'
>B : ConstEnum.B
>'B' : "B"
}

enum R1 {
>R1 : R1

    ...LiteralEnum1,
>LiteralEnum1 : typeof LiteralEnum1

    R1 = 'R1'
>R1 : R1.R1
>'R1' : "R1"
}

enum R2 {
>R2 : R2

    ...LiteralEnum2,
>LiteralEnum2 : typeof LiteralEnum2

    R2 = 'R2'
>R2 : R2.R2
>'R2' : "R2"
}

enum R3 {
>R3 : R3

    ...LiteralEnum3,
>LiteralEnum3 : typeof LiteralEnum3

    R3 = 'R3'
>R3 : R3.R3
>'R3' : "R3"
}

enum R4 {
>R4 : R4

    ...NumericEnum1,
>NumericEnum1 : typeof NumericEnum1

    R4 = 'R4'
>R4 : R4.R4
>'R4' : "R4"
}

enum R5 {
>R5 : R5

    ...NumericEnum2,
>NumericEnum2 : typeof NumericEnum2

    R5 = 'R5'
>R5 : R5.R5
>'R5' : "R5"
}

enum R6 {
>R6 : R6

    ...NumericEnum3,
>NumericEnum3 : typeof NumericEnum3

    R6 = 'R6'
>R6 : R6.R6
>'R6' : "R6"
}

enum R7 {
>R7 : R7

    ...ConstEnum,
>ConstEnum : typeof ConstEnum

    R7 = 'R7'
>R7 : R7.R7
>'R7' : "R7"
}

const enum R8 {
>R8 : R8

    ...LiteralEnum1,
>LiteralEnum1 : typeof LiteralEnum1

    R8 = 'R8'
>R8 : R8.R8
>'R8' : "R8"
}

