=== tests/cases/conformance/expressions/partialApplication/partialApplication.ts ===
const mul = (a: number, b: number) => a * b;
>mul : Symbol(mul, Decl(partialApplication.ts, 0, 5))
>a : Symbol(a, Decl(partialApplication.ts, 0, 13))
>b : Symbol(b, Decl(partialApplication.ts, 0, 23))
>a : Symbol(a, Decl(partialApplication.ts, 0, 13))
>b : Symbol(b, Decl(partialApplication.ts, 0, 23))

const left = mul(?, 2);
>left : Symbol(left, Decl(partialApplication.ts, 2, 5))
>mul : Symbol(mul, Decl(partialApplication.ts, 0, 5))

const right = mul(2, ?);
>right : Symbol(right, Decl(partialApplication.ts, 3, 5))
>mul : Symbol(mul, Decl(partialApplication.ts, 0, 5))

const both = mul(?, ?);
>both : Symbol(both, Decl(partialApplication.ts, 4, 5))
>mul : Symbol(mul, Decl(partialApplication.ts, 0, 5))

left(3);
>left : Symbol(left, Decl(partialApplication.ts, 2, 5))

right(4);
>right : Symbol(right, Decl(partialApplication.ts, 3, 5))

both(5, 6);
>both : Symbol(both, Decl(partialApplication.ts, 4, 5))

left.length === 1;
>left.length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))
>left : Symbol(left, Decl(partialApplication.ts, 2, 5))
>length : Symbol(Function.length, Decl(lib.es5.d.ts, --, --))

left.name === 'left';
>left.name : Symbol(Function.name, Decl(lib.es2015.core.d.ts, --, --))
>left : Symbol(left, Decl(partialApplication.ts, 2, 5))
>name : Symbol(Function.name, Decl(lib.es2015.core.d.ts, --, --))

const mulSubtract = (a:number, b:number, c:number) => mul(a, b) - c;
>mulSubtract : Symbol(mulSubtract, Decl(partialApplication.ts, 13, 5))
>a : Symbol(a, Decl(partialApplication.ts, 13, 21))
>b : Symbol(b, Decl(partialApplication.ts, 13, 30))
>c : Symbol(c, Decl(partialApplication.ts, 13, 40))
>mul : Symbol(mul, Decl(partialApplication.ts, 0, 5))
>a : Symbol(a, Decl(partialApplication.ts, 13, 21))
>b : Symbol(b, Decl(partialApplication.ts, 13, 30))
>c : Symbol(c, Decl(partialApplication.ts, 13, 40))

const middle = mulSubtract(5, ?, 1);
>middle : Symbol(middle, Decl(partialApplication.ts, 15, 5))
>mulSubtract : Symbol(mulSubtract, Decl(partialApplication.ts, 13, 5))

const sides = mulSubtract(?, 10, ?);
>sides : Symbol(sides, Decl(partialApplication.ts, 16, 5))
>mulSubtract : Symbol(mulSubtract, Decl(partialApplication.ts, 13, 5))

middle(2);
>middle : Symbol(middle, Decl(partialApplication.ts, 15, 5))

sides(4, 3);
>sides : Symbol(sides, Decl(partialApplication.ts, 16, 5))

