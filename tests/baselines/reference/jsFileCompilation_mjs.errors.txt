tests/cases/compiler/a.mjs(6,5): error TS1117: An object literal cannot have multiple properties with the same name in strict mode.
tests/cases/compiler/a.mjs(6,5): error TS2300: Duplicate identifier 'a'.
tests/cases/compiler/a.mjs(8,5): error TS1214: Identifier expected. 'let' is a reserved word in strict mode. Modules are automatically in strict mode.
tests/cases/compiler/a.mjs(9,8): error TS1102: 'delete' cannot be called on an identifier in strict mode.
tests/cases/compiler/a.mjs(9,8): error TS2703: The operand of a 'delete' operator must be a property reference.
tests/cases/compiler/a.mjs(11,10): error TS1215: Invalid use of 'eval'. Modules are automatically in strict mode.
tests/cases/compiler/a.mjs(13,10): error TS1215: Invalid use of 'arguments'. Modules are automatically in strict mode.
tests/cases/compiler/a.mjs(16,1): error TS1101: 'with' statements are not allowed in strict mode.
tests/cases/compiler/a.mjs(16,1): error TS2410: The 'with' statement is not supported. All symbols in a 'with' block will have type 'any'.
tests/cases/compiler/b.mjs(2,7): error TS1210: Invalid use of 'eval'. Class definitions are automatically in strict mode.
tests/cases/compiler/b.mjs(5,13): error TS1213: Identifier expected. 'let' is a reserved word in strict mode. Class definitions are automatically in strict mode.
tests/cases/compiler/c.mjs(1,5): error TS1214: Identifier expected. 'let' is a reserved word in strict mode. Modules are automatically in strict mode.
tests/cases/compiler/c.mjs(2,5): error TS1215: Invalid use of 'eval'. Modules are automatically in strict mode.
tests/cases/compiler/d.mjs(1,9): error TS1121: Octal literals are not allowed in strict mode.
tests/cases/compiler/d.mjs(1,11): error TS1005: ',' expected.


==== tests/cases/compiler/a.mjs (9 errors) ====
    // `.mjs` files are automatically external modules, and thus in strict mode
    
    var a = {
        a: "hello", // error
        b: 10,
        a: 10 // error
        ~
!!! error TS1117: An object literal cannot have multiple properties with the same name in strict mode.
        ~
!!! error TS2300: Duplicate identifier 'a'.
    };
    var let = 10; // error
        ~~~
!!! error TS1214: Identifier expected. 'let' is a reserved word in strict mode. Modules are automatically in strict mode.
    delete a; // error
           ~
!!! error TS1102: 'delete' cannot be called on an identifier in strict mode.
           ~
!!! error TS2703: The operand of a 'delete' operator must be a property reference.
    try {
    } catch (eval) { // error
             ~~~~
!!! error TS1215: Invalid use of 'eval'. Modules are automatically in strict mode.
    }
    function arguments() { // error
             ~~~~~~~~~
!!! error TS1215: Invalid use of 'arguments'. Modules are automatically in strict mode.
    }
    
    with (a) {
    ~~~~
!!! error TS1101: 'with' statements are not allowed in strict mode.
    ~~~~~~~~
!!! error TS2410: The 'with' statement is not supported. All symbols in a 'with' block will have type 'any'.
        b = 10;
    }
    
==== tests/cases/compiler/b.mjs (2 errors) ====
    class c {
        a(eval) { //error
          ~~~~
!!! error TS1210: Invalid use of 'eval'. Class definitions are automatically in strict mode.
        }
        method() {
            var let = 10; // error
                ~~~
!!! error TS1213: Identifier expected. 'let' is a reserved word in strict mode. Class definitions are automatically in strict mode.
        }
    }
    
==== tests/cases/compiler/c.mjs (2 errors) ====
    var let = 10;
        ~~~
!!! error TS1214: Identifier expected. 'let' is a reserved word in strict mode. Modules are automatically in strict mode.
    var eval = function () {
        ~~~~
!!! error TS1215: Invalid use of 'eval'. Modules are automatically in strict mode.
    };
    
==== tests/cases/compiler/d.mjs (2 errors) ====
    var x = 009; // error
            ~~
!!! error TS1121: Octal literals are not allowed in strict mode.
              ~
!!! error TS1005: ',' expected.
    