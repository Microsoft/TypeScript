=== tests/cases/compiler/functionInferenceDecomposesIntersection.ts ===
declare namespace React {
    type WeakValidationMap<T> = {
>WeakValidationMap : WeakValidationMap<T>

        [K in keyof T]?: null extends T[K] ? string : string
>null : null

    };

    interface FunctionComponent<P = {}> {
        propTypes?: WeakValidationMap<P>;
>propTypes : WeakValidationMap<P>
    }
}

type A<T1> = <T2>() => React.FunctionComponent<T1 & T2>;
>A : A<T1>
>React : any

function B<T>(_: A<T>) {}
>B : <T>(_: A<T>) => void
>_ : A<T>

interface C {
    r: string;
>r : string
}

function myFunction<T2>(): React.FunctionComponent<C & T2> {
>myFunction : <T2>() => React.FunctionComponent<C & T2>
>React : any

    return {};
>{} : {}
}

// B<C>(myFunction) // No error
B(myFunction) // should be the same as above (T in B inferred as C)
>B(myFunction) : void
>B : <T>(_: A<T>) => void
>myFunction : <T2>() => React.FunctionComponent<C & T2>

