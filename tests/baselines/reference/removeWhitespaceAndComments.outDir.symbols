=== tests/cases/conformance/removeWhitespace/global.d.ts ===
declare let obj: any, i: any, fn;
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>fn : Symbol(fn, Decl(global.d.ts, 0, 29))

=== tests/cases/conformance/removeWhitespace/propertyAccess.ts ===
obj.a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

obj .a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

obj. a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

obj . a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

obj.
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    a

obj
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    .a

obj
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    .
    a

obj // comment
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    . // comment
    a // comment

obj /* comment */
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    . /* comment */
    a /* comment */

1..valueOf
>1..valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1.. valueOf
>1.. valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1. .valueOf
>1. .valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1. . valueOf
>1. . valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1 .valueOf
>1 .valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1 . valueOf
>1 . valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1..
>1..    valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

    valueOf
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1.
>1.    .valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

    .valueOf
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1.
>1.    .    valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

    .
    valueOf
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1. // comment
>1. // comment    . // comment    valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

    . // comment
    valueOf // comment
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1. /* comment */
>1. /* comment */    . /* comment */    valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

    . /* comment */
    valueOf /* comment */
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1
>1    .valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

    .valueOf
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1
>1    .    valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

    .
    valueOf
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1 // comment
>1 // comment    . // comment    valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

    . // comment
    valueOf // comment
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

1 /* comment */
>1 /* comment */    . /* comment */    valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

    . /* comment */
    valueOf /* comment */
>valueOf : Symbol(Number.valueOf, Decl(lib.es5.d.ts, --, --))

=== tests/cases/conformance/removeWhitespace/elementAccess.ts ===
obj["a"]
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

obj [ "a" ]
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

obj [
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    "a" ]

obj
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    [
    "a"
    ]

obj // comment
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    [ // comment
    "a" // comment
    ] // comment

obj /* comment */
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    [ /* comment */
    "a" /* comment */
    ] /* comment */

=== tests/cases/conformance/removeWhitespace/update.ts ===
i + + i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i + +i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i+ + i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i+ +i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i + ++ i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i + ++i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i+ ++ i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i+ ++i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i ++ + i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i ++ +i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i++ + i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i++ +i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i+++i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i - - i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i - -i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i- - i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i- -i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i - -- i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i - --i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i- -- i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i- --i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i -- - i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i -- -i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i-- - i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i-- -i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

i---i
>i : Symbol(i, Decl(global.d.ts, 0, 21))
>i : Symbol(i, Decl(global.d.ts, 0, 21))

=== tests/cases/conformance/removeWhitespace/switch.ts ===
switch (i) {
>i : Symbol(i, Decl(global.d.ts, 0, 21))

    case 0: break;
    case 1: break;
    default: break;
}

=== tests/cases/conformance/removeWhitespace/keywords.ts ===
delete obj.a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

delete (obj).a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

delete [][0]
void obj.a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

void (obj).a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

void [][0]
typeof obj.a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

typeof (obj).a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

typeof [][0]
function f1() {
>f1 : Symbol(f1, Decl(keywords.ts, 8, 12))

    return typeof obj
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))
}
async function* f2() {
>f2 : Symbol(f2, Decl(keywords.ts, 11, 1))

    yield 1
    yield obj
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    yield (obj)
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    yield []
    yield* []
    yield *[]
    yield * []
    yield
    i
>i : Symbol(i, Decl(global.d.ts, 0, 21))

    yield yield
    yield typeof obj
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    yield void obj
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    yield delete obj.a
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    await 1
    await obj
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    for await (const x of []);
>x : Symbol(x, Decl(keywords.ts, 28, 20))

    return yield await obj
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))
}
export class C {}
>C : Symbol(C, Decl(keywords.ts, 30, 1))

export default function() {}

=== tests/cases/conformance/removeWhitespace/statements.ts ===
obj;
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

fn();
>fn : Symbol(fn, Decl(global.d.ts, 0, 29))

;
function fn3() {
>fn3 : Symbol(fn3, Decl(statements.ts, 2, 1))

    obj;
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

    fn();
>fn : Symbol(fn, Decl(global.d.ts, 0, 29))

    ;
    function f() {}
>f : Symbol(f, Decl(statements.ts, 6, 5))

    return;
    function g() {}
>g : Symbol(g, Decl(statements.ts, 8, 11))
}

=== tests/cases/conformance/removeWhitespace/variables.ts ===
var a = 0, b, { c } = obj, [d] = obj;
>a : Symbol(a, Decl(variables.ts, 0, 3))
>b : Symbol(b, Decl(variables.ts, 0, 10))
>c : Symbol(c, Decl(variables.ts, 0, 15))
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))
>d : Symbol(d, Decl(variables.ts, 0, 28))
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

let e = 0, f, { g } = obj, [h] = obj;
>e : Symbol(e, Decl(variables.ts, 1, 3))
>f : Symbol(f, Decl(variables.ts, 1, 10))
>g : Symbol(g, Decl(variables.ts, 1, 15))
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))
>h : Symbol(h, Decl(variables.ts, 1, 28))
>obj : Symbol(obj, Decl(global.d.ts, 0, 11))

