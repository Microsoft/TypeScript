=== tests/cases/conformance/es6/destructuring/destructuringParameterProperties4.ts ===
class C1<T, U, V> {
>C1 : C1<T, U, V>

    constructor(private k: T, protected [a, b, c]: [T,U,V]) {
>k : T
>a : T
>b : U
>c : V

        if ((b === undefined && c === undefined) || (this.b === undefined && this.c === undefined)) {
>(b === undefined && c === undefined) || (this.b === undefined && this.c === undefined) : boolean
>(b === undefined && c === undefined) : boolean
>b === undefined && c === undefined : boolean
>b === undefined : boolean
>b : U
>undefined : undefined
>c === undefined : boolean
>c : V
>undefined : undefined
>(this.b === undefined && this.c === undefined) : boolean
>this.b === undefined && this.c === undefined : boolean
>this.b === undefined : boolean
>this.b : U
>this : this
>b : U
>undefined : undefined
>this.c === undefined : boolean
>this.c : V
>this : this
>c : V
>undefined : undefined

            this.a = a || k;
>this.a = a || k : T
>this.a : T
>this : this
>a : T
>a || k : T
>a : T
>k : T
        }
    }

    public getA() {
>getA : () => T

        return this.a
>this.a : T
>this : this
>a : T
    }

    public getB() {
>getB : () => U

        return this.b
>this.b : U
>this : this
>b : U
    }

    public getC() {
>getC : () => V

        return this.c;
>this.c : V
>this : this
>c : V
    }
}

class C2 extends C1<number, string, boolean> {
>C2 : C2
>C1 : C1<number, string, boolean>

    public doSomethingWithSuperProperties() {
>doSomethingWithSuperProperties : () => string

        return `${this.a} ${this.b} ${this.c}`;
>`${this.a} ${this.b} ${this.c}` : string
>this.a : number
>this : this
>a : number
>this.b : string
>this : this
>b : string
>this.c : boolean
>this : this
>c : boolean
    }
}

