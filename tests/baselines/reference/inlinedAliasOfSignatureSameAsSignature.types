=== tests/cases/compiler/inlinedAliasOfSignatureSameAsSignature.ts ===
export type Example<TData>
>Example : Example<TData>

    = (data: TData | null | undefined) => string | null;
>data : TData | null | undefined
>null : null
>null : null

function foo<T>() {
>foo : <T>() => void

    let x: Example<T> = undefined!;
>x : Example<T>
>undefined! : never
>undefined : undefined

    let y: Example<T | null | undefined> = undefined!;
>y : Example<T | null | undefined>
>null : null
>undefined! : never
>undefined : undefined

    y = x;
>y = x : Example<T>
>y : Example<T | null | undefined>
>x : Example<T>

    let x1: (data: T | null | undefined) => string | null = undefined!;
>x1 : (data: T | null | undefined) => string | null
>data : T | null | undefined
>null : null
>null : null
>undefined! : never
>undefined : undefined

    let y1: (data: (T | null | undefined) | null | undefined) => string | null = undefined!;
>y1 : (data: (T | null | undefined) | null | undefined) => string | null
>data : T | null | undefined
>null : null
>null : null
>null : null
>undefined! : never
>undefined : undefined

    y1 = x1
>y1 = x1 : (data: T | null | undefined) => string | null
>y1 : (data: T | null | undefined) => string | null
>x1 : (data: T | null | undefined) => string | null
}

export interface Example2<TData> {
    item: (data: TData | null | undefined) => string | null;
>item : (data: TData | null | undefined) => string | null
>data : TData | null | undefined
>null : null
>null : null
}

function bar<T>() {
>bar : <T>() => void

    let x: Example2<T> = undefined!;
>x : Example2<T>
>undefined! : never
>undefined : undefined

    let y: Example2<T | null | undefined> = undefined!;
>y : Example2<T | null | undefined>
>null : null
>undefined! : never
>undefined : undefined

    y = x;
>y = x : Example2<T>
>y : Example2<T | null | undefined>
>x : Example2<T>

    let x1: { item: (data: T | null | undefined) => string | null } = undefined!;
>x1 : { item: (data: T | null | undefined) => string | null; }
>item : (data: T | null | undefined) => string | null
>data : T | null | undefined
>null : null
>null : null
>undefined! : never
>undefined : undefined

    let y1: { item: (data: (T | null | undefined) | null | undefined) => string | null } = undefined!;
>y1 : { item: (data: (T | null | undefined) | null | undefined) => string | null; }
>item : (data: (T | null | undefined) | null | undefined) => string | null
>data : T | null | undefined
>null : null
>null : null
>null : null
>undefined! : never
>undefined : undefined

    y1 = x1
>y1 = x1 : { item: (data: T | null | undefined) => string | null; }
>y1 : { item: (data: T | null | undefined) => string | null; }
>x1 : { item: (data: T | null | undefined) => string | null; }
}
