=== tests/cases/compiler/contextualTypeInObjectProperty.ts ===
type Shape = { 
>Shape : Symbol(Shape, Decl(contextualTypeInObjectProperty.ts, 0, 0))

    "a"?: (a: "a") => "a";
>"a" : Symbol("a", Decl(contextualTypeInObjectProperty.ts, 0, 14))
>a : Symbol(a, Decl(contextualTypeInObjectProperty.ts, 1, 11))

    "b"?: (b: "b") => "b";
>"b" : Symbol("b", Decl(contextualTypeInObjectProperty.ts, 1, 26))
>b : Symbol(b, Decl(contextualTypeInObjectProperty.ts, 2, 11))

    "c"?: (c: "c") => "c";
>"c" : Symbol("c", Decl(contextualTypeInObjectProperty.ts, 2, 26))
>c : Symbol(c, Decl(contextualTypeInObjectProperty.ts, 3, 11))

};

const getC = () => "c" as const;
>getC : Symbol(getC, Decl(contextualTypeInObjectProperty.ts, 6, 5))

export const obj: Shape = {
>obj : Symbol(obj, Decl(contextualTypeInObjectProperty.ts, 8, 12))
>Shape : Symbol(Shape, Decl(contextualTypeInObjectProperty.ts, 0, 0))

  ["a"]: keyA => keyA,
>["a"] : Symbol(["a"], Decl(contextualTypeInObjectProperty.ts, 8, 27))
>"a" : Symbol(["a"], Decl(contextualTypeInObjectProperty.ts, 8, 27))
>keyA : Symbol(keyA, Decl(contextualTypeInObjectProperty.ts, 9, 8))
>keyA : Symbol(keyA, Decl(contextualTypeInObjectProperty.ts, 9, 8))

  ["b" as "b"]: keyB => keyB,
>["b" as "b"] : Symbol(["b" as "b"], Decl(contextualTypeInObjectProperty.ts, 9, 22))
>keyB : Symbol(keyB, Decl(contextualTypeInObjectProperty.ts, 10, 15))
>keyB : Symbol(keyB, Decl(contextualTypeInObjectProperty.ts, 10, 15))

  [getC()]: keyC => keyC,
>[getC()] : Symbol([getC()], Decl(contextualTypeInObjectProperty.ts, 10, 29))
>getC : Symbol(getC, Decl(contextualTypeInObjectProperty.ts, 6, 5))
>keyC : Symbol(keyC, Decl(contextualTypeInObjectProperty.ts, 11, 11))
>keyC : Symbol(keyC, Decl(contextualTypeInObjectProperty.ts, 11, 11))

};


const getUnion = () => "b" as "b" | "c";
>getUnion : Symbol(getUnion, Decl(contextualTypeInObjectProperty.ts, 15, 5))

export const unionType: Shape = {
>unionType : Symbol(unionType, Decl(contextualTypeInObjectProperty.ts, 17, 12))
>Shape : Symbol(Shape, Decl(contextualTypeInObjectProperty.ts, 0, 0))

  [getUnion()]: keyC => keyC,
>[getUnion()] : Symbol([getUnion()], Decl(contextualTypeInObjectProperty.ts, 17, 33))
>getUnion : Symbol(getUnion, Decl(contextualTypeInObjectProperty.ts, 15, 5))
>keyC : Symbol(keyC, Decl(contextualTypeInObjectProperty.ts, 18, 15))
>keyC : Symbol(keyC, Decl(contextualTypeInObjectProperty.ts, 18, 15))

};


export const func: Shape = {
>func : Symbol(func, Decl(contextualTypeInObjectProperty.ts, 22, 12))
>Shape : Symbol(Shape, Decl(contextualTypeInObjectProperty.ts, 0, 0))

  [getC]: keyC => keyC,
>[getC] : Symbol([getC], Decl(contextualTypeInObjectProperty.ts, 22, 28))
>getC : Symbol(getC, Decl(contextualTypeInObjectProperty.ts, 6, 5))
>keyC : Symbol(keyC, Decl(contextualTypeInObjectProperty.ts, 23, 9))
>keyC : Symbol(keyC, Decl(contextualTypeInObjectProperty.ts, 23, 9))

};

const generic: {
>generic : Symbol(generic, Decl(contextualTypeInObjectProperty.ts, 26, 5))

  c: <T>(arg: T) => T;
>c : Symbol(c, Decl(contextualTypeInObjectProperty.ts, 26, 16))
>T : Symbol(T, Decl(contextualTypeInObjectProperty.ts, 27, 6))
>arg : Symbol(arg, Decl(contextualTypeInObjectProperty.ts, 27, 9))
>T : Symbol(T, Decl(contextualTypeInObjectProperty.ts, 27, 6))
>T : Symbol(T, Decl(contextualTypeInObjectProperty.ts, 27, 6))

} = {
  [getC()]: keyC => keyC,
>[getC()] : Symbol([getC()], Decl(contextualTypeInObjectProperty.ts, 28, 5))
>getC : Symbol(getC, Decl(contextualTypeInObjectProperty.ts, 6, 5))
>keyC : Symbol(keyC, Decl(contextualTypeInObjectProperty.ts, 29, 11))
>keyC : Symbol(keyC, Decl(contextualTypeInObjectProperty.ts, 29, 11))

};

