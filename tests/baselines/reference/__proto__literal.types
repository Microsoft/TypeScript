=== tests/cases/compiler/__proto__literal.ts ===
const o = { a: 1 }
>o : { a: number; }
>{ a: 1 } : { a: number; }
>a : number
>1 : 1

const __proto__ = o
>__proto__ : { a: number; }
>o : { a: number; }

// Should
const x1 = { __proto__: o }
>x1 : { a: number; }
>{ __proto__: o } : { a: number; }
>__proto__ : { a: number; }
>o : { a: number; }

const x2 = { __proto_\u005f: o }
>x2 : { a: number; }
>{ __proto_\u005f: o } : { a: number; }
>__proto_\u005f : { a: number; }
>o : { a: number; }

const x3 = { "__proto__": o }
>x3 : { a: number; }
>{ "__proto__": o } : { a: number; }
>"__proto__" : { a: number; }
>o : { a: number; }

const x4 = { "__proto_\u005f": o }
>x4 : { a: number; }
>{ "__proto_\u005f": o } : { a: number; }
>"__proto_\u005f" : { a: number; }
>o : { a: number; }

// Duplicate
const y1 = { __proto__: o, __proto_\u005f: o }
>y1 : { a: number; }
>{ __proto__: o, __proto_\u005f: o } : { a: number; }
>__proto__ : { a: number; }
>o : { a: number; }
>__proto_\u005f : { a: number; }
>o : { a: number; }

// Spread order
const z1 = { ...({a: ''}), __proto__: o }
>z1 : { a: string; }
>{ ...({a: ''}), __proto__: o } : { a: string; }
>({a: ''}) : { a: string; }
>{a: ''} : { a: string; }
>a : string
>'' : ""
>__proto__ : { a: number; }
>o : { a: number; }

const z2 = { __proto__: o, ...({a: ''}) }
>z2 : { a: string; }
>{ __proto__: o, ...({a: ''}) } : { a: string; }
>__proto__ : { a: number; }
>o : { a: number; }
>({a: ''}) : { a: string; }
>{a: ''} : { a: string; }
>a : string
>'' : ""

// Null
const w = { __proto__: null }
>w : {}
>{ __proto__: null } : {}
>__proto__ : null
>null : null

// Non-object
const q = { __proto__: 1, x: 1 }
>q : { x: number; }
>{ __proto__: 1, x: 1 } : { x: number; }
>__proto__ : number
>1 : 1
>x : number
>1 : 1

// Should not
const x5 = { ["__proto__"]: o }
>x5 : { __proto__: { a: number; }; }
>{ ["__proto__"]: o } : { __proto__: { a: number; }; }
>["__proto__"] : { a: number; }
>"__proto__" : "__proto__"
>o : { a: number; }

const x6 = { __proto__ }
>x6 : { __proto__: { a: number; }; }
>{ __proto__ } : { __proto__: { a: number; }; }
>__proto__ : { a: number; }

const x7 = { __proto__() {} }
>x7 : { __proto__(): void; }
>{ __proto__() {} } : { __proto__(): void; }
>__proto__ : () => void

enum e { __proto__ = 1 }
>e : e
>__proto__ : e.__proto__
>1 : 1
{
    const { __proto__ } = { ['__proto__']: 1 }
>__proto__ : number
>{ ['__proto__']: 1 } : { __proto__: number; }
>['__proto__'] : number
>'__proto__' : "__proto__"
>1 : 1
}
