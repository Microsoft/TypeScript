=== tests/cases/conformance/esnext/bindOperator/bindOperator3.ts ===
declare const func: (num: number) => number
>func : Symbol(func, Decl(bindOperator3.ts, 0, 13))
>num : Symbol(num, Decl(bindOperator3.ts, 0, 21))

declare const obj1: { func: (this: { foo: string }) => boolean }
>obj1 : Symbol(obj1, Decl(bindOperator3.ts, 1, 13))
>func : Symbol(func, Decl(bindOperator3.ts, 1, 21))
>this : Symbol(this, Decl(bindOperator3.ts, 1, 29))
>foo : Symbol(foo, Decl(bindOperator3.ts, 1, 36))

declare const obj2: { foo: string; func: (this: { foo: string }) => boolean }
>obj2 : Symbol(obj2, Decl(bindOperator3.ts, 2, 13))
>foo : Symbol(foo, Decl(bindOperator3.ts, 2, 21))
>func : Symbol(func, Decl(bindOperator3.ts, 2, 34))
>this : Symbol(this, Decl(bindOperator3.ts, 2, 42))
>foo : Symbol(foo, Decl(bindOperator3.ts, 2, 49))

const ok1 = ::obj2.func
>ok1 : Symbol(ok1, Decl(bindOperator3.ts, 4, 5))
>obj2.func : Symbol(func, Decl(bindOperator3.ts, 2, 34))
>obj2 : Symbol(obj2, Decl(bindOperator3.ts, 2, 13))
>func : Symbol(func, Decl(bindOperator3.ts, 2, 34))

const val1 = ok1()
>val1 : Symbol(val1, Decl(bindOperator3.ts, 5, 5))
>ok1 : Symbol(ok1, Decl(bindOperator3.ts, 4, 5))

const val2 = (::obj2.func)()
>val2 : Symbol(val2, Decl(bindOperator3.ts, 6, 5))
>obj2.func : Symbol(func, Decl(bindOperator3.ts, 2, 34))
>obj2 : Symbol(obj2, Decl(bindOperator3.ts, 2, 13))
>func : Symbol(func, Decl(bindOperator3.ts, 2, 34))

const bad1 = ::obj1.func
>bad1 : Symbol(bad1, Decl(bindOperator3.ts, 8, 5))
>obj1.func : Symbol(func, Decl(bindOperator3.ts, 1, 21))
>obj1 : Symbol(obj1, Decl(bindOperator3.ts, 1, 13))
>func : Symbol(func, Decl(bindOperator3.ts, 1, 21))




