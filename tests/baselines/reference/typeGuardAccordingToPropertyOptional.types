=== tests/cases/conformance/expressions/typeGuards/typeGuardAccordingToPropertyOptional.ts ===
interface Foo1 {
    key1:{
>key1 : { key2: number; }

        key2:number;
>key2 : number

    }|undefined;
    f1: number;
>f1 : number
}

interface Foo2 {
    key1: {
>key1 : { key2: string; }

        key2:string
>key2 : string

    } | undefined;
    f2: number;
>f2 : number
}

interface Foo3 {
    key1:{
>key1 : { key2: number; }

        key2:number;
>key2 : number

    };
    f2: number;
>f2 : number
}

type U1 = Foo1 | Foo2 | Foo3;
>U1 : U1

type U2 = Foo1 | Foo2 | Foo3|undefined;
>U2 : U1

// unnecessary optional chain
function f1(u: U1) {
>f1 : (u: U1) => void
>u : U1

    if (typeof u?.key1 !== 'number') {
>typeof u?.key1 !== 'number' : boolean
>typeof u?.key1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>'number' : "number"

        u;  // U1
>u : U1
    }
    if (typeof u?.key1 === 'number') {
>typeof u?.key1 === 'number' : boolean
>typeof u?.key1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>'number' : "number"

        u;  // never
>u : never
    }
    if (typeof u?.key1 !== 'undefined') {
>typeof u?.key1 !== 'undefined' : boolean
>typeof u?.key1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>'undefined' : "undefined"

        u;  // U1
>u : U1
    }
    if (typeof u?.key1 === 'undefined') {
>typeof u?.key1 === 'undefined' : boolean
>typeof u?.key1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>'undefined' : "undefined"

        u;  // U1
>u : U1
    }
}

// non-root optional chain
function f2(u: U1) {
>f2 : (u: U1) => void
>u : U1

    if (typeof u.key1?.key2 !== 'number') {
>typeof u.key1?.key2 !== 'number' : boolean
>typeof u.key1?.key2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u.key1?.key2 : string | number
>u.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>key2 : string | number
>'number' : "number"

        u;  // U1
>u : U1
    }
    if (typeof u.key1?.key2 === 'number') {
>typeof u.key1?.key2 === 'number' : boolean
>typeof u.key1?.key2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u.key1?.key2 : string | number
>u.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>key2 : string | number
>'number' : "number"

        u;  // Foo1 | Foo3
>u : Foo1 | Foo3
    }
    if (typeof u.key1?.key2 !== 'undefined') {
>typeof u.key1?.key2 !== 'undefined' : boolean
>typeof u.key1?.key2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u.key1?.key2 : string | number
>u.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>key2 : string | number
>'undefined' : "undefined"

        u;  // U1
>u : U1
    }
    if (typeof u.key1?.key2 === 'undefined') {
>typeof u.key1?.key2 === 'undefined' : boolean
>typeof u.key1?.key2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u.key1?.key2 : string | number
>u.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>key2 : string | number
>'undefined' : "undefined"

        u;  // U1
>u : U1
    }
}

// root optional chain
function f3(u: U2) {
>f3 : (u: U2) => void
>u : U1

    if (typeof u?.key1 !== 'number') {
>typeof u?.key1 !== 'number' : boolean
>typeof u?.key1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>'number' : "number"

        u;  // U2
>u : U1
    }
    if (typeof u?.key1 === 'number') {
>typeof u?.key1 === 'number' : boolean
>typeof u?.key1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>'number' : "number"

        u;  // never
>u : never
    }
    if (typeof u?.key1 !== 'undefined') {
>typeof u?.key1 !== 'undefined' : boolean
>typeof u?.key1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>'undefined' : "undefined"

        u;  // Foo1 | Foo2 | Foo3
>u : U1
    }
    if (typeof u?.key1 === 'undefined') {
>typeof u?.key1 === 'undefined' : boolean
>typeof u?.key1 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>'undefined' : "undefined"

        u;  // U2
>u : U1
    }
}

function f4(u: U2) {
>f4 : (u: U2) => void
>u : U1

    if (typeof u?.key1?.key2 !== 'number') {
>typeof u?.key1?.key2 !== 'number' : boolean
>typeof u?.key1?.key2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1?.key2 : string | number
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>key2 : string | number
>'number' : "number"

        u;  // U2
>u : U1
    }
    if (typeof u?.key1?.key2 === 'number') {
>typeof u?.key1?.key2 === 'number' : boolean
>typeof u?.key1?.key2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1?.key2 : string | number
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>key2 : string | number
>'number' : "number"

        u;  // Foo1 | Foo3
>u : Foo1 | Foo3
    }
    if (typeof u?.key1?.key2 !== 'undefined') {
>typeof u?.key1?.key2 !== 'undefined' : boolean
>typeof u?.key1?.key2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1?.key2 : string | number
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>key2 : string | number
>'undefined' : "undefined"

        u;  // Foo1 | Foo2 | Foo3
>u : U1
    }
    if (typeof u?.key1?.key2 === 'undefined') {
>typeof u?.key1?.key2 === 'undefined' : boolean
>typeof u?.key1?.key2 : "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function"
>u?.key1?.key2 : string | number
>u?.key1 : { key2: number; } | { key2: string; } | { key2: number; }
>u : U1
>key1 : { key2: number; } | { key2: string; } | { key2: number; }
>key2 : string | number
>'undefined' : "undefined"

        u;  // U2
>u : U1
    }
}

