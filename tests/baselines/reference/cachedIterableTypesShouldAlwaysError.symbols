=== tests/cases/compiler/cachedIterableTypesShouldAlwaysError.ts ===
function foo(obj:
>foo : Symbol(foo, Decl(cachedIterableTypesShouldAlwaysError.ts, 0, 0))
>obj : Symbol(obj, Decl(cachedIterableTypesShouldAlwaysError.ts, 0, 13))

    { x: "x", [Symbol.iterator](): Generator<{ b: false }> } |
>x : Symbol(x, Decl(cachedIterableTypesShouldAlwaysError.ts, 1, 5))
>[Symbol.iterator] : Symbol([Symbol.iterator], Decl(cachedIterableTypesShouldAlwaysError.ts, 1, 13))
>Symbol.iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Symbol : Symbol(Symbol, Decl(lib.es5.d.ts, --, --), Decl(lib.es2015.symbol.d.ts, --, --), Decl(lib.es2015.symbol.wellknown.d.ts, --, --))
>iterator : Symbol(SymbolConstructor.iterator, Decl(lib.es2015.iterable.d.ts, --, --))
>Generator : Symbol(Generator, Decl(lib.es2015.generator.d.ts, --, --))
>b : Symbol(b, Decl(cachedIterableTypesShouldAlwaysError.ts, 1, 46))

    { y: "y" }
>y : Symbol(y, Decl(cachedIterableTypesShouldAlwaysError.ts, 2, 5))

) {
	for (const k of obj) { // should error
>k : Symbol(k, Decl(cachedIterableTypesShouldAlwaysError.ts, 4, 11))
>obj : Symbol(obj, Decl(cachedIterableTypesShouldAlwaysError.ts, 0, 13))

		void k;
>k : Symbol(k, Decl(cachedIterableTypesShouldAlwaysError.ts, 4, 11))
	}

	for (const k of obj) { // should error
>k : Symbol(k, Decl(cachedIterableTypesShouldAlwaysError.ts, 8, 11))
>obj : Symbol(obj, Decl(cachedIterableTypesShouldAlwaysError.ts, 0, 13))

		void k;
>k : Symbol(k, Decl(cachedIterableTypesShouldAlwaysError.ts, 8, 11))
	}
}

