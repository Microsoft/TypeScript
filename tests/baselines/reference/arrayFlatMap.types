=== tests/cases/compiler/arrayFlatMap.ts ===
const array: number[] = [];
>array : number[]
>[] : undefined[]

const readonlyArray: ReadonlyArray<number> = [];
>readonlyArray : readonly number[]
>[] : undefined[]

array.flatMap((): ReadonlyArray<number> => []); // ok
>array.flatMap((): ReadonlyArray<number> => []) : number[]
>array.flatMap : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => Flatten<U>[]
>array : number[]
>flatMap : <U>(callbackfn: (value: number, index: number, array: number[]) => U, thisArg?: any) => Flatten<U>[]
>(): ReadonlyArray<number> => [] : () => readonly number[]
>[] : undefined[]

readonlyArray.flatMap((): ReadonlyArray<number> => []); // ok
>readonlyArray.flatMap((): ReadonlyArray<number> => []) : number[]
>readonlyArray.flatMap : <U>(callbackfn: (value: number, index: number, array: readonly number[]) => U, thisArg?: any) => Flatten<U>[]
>readonlyArray : readonly number[]
>flatMap : <U>(callbackfn: (value: number, index: number, array: readonly number[]) => U, thisArg?: any) => Flatten<U>[]
>(): ReadonlyArray<number> => [] : () => readonly number[]
>[] : undefined[]

// #19535

let [actual] = [""].flatMap(undefined as () => string[] | string[][]);
>actual : string | string[]
>[""].flatMap(undefined as () => string[] | string[][]) : (string | string[])[]
>[""].flatMap : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => Flatten<U>[]
>[""] : string[]
>"" : ""
>flatMap : <U>(callbackfn: (value: string, index: number, array: string[]) => U, thisArg?: any) => Flatten<U>[]
>undefined as () => string[] | string[][] : () => string[] | string[][]
>undefined : undefined

const expected: string | string[] = actual;
>expected : string | string[]
>actual : string | string[]

actual = undefined as string | string[];
>actual = undefined as string | string[] : string | string[]
>actual : string | string[]
>undefined as string | string[] : string | string[]
>undefined : undefined

