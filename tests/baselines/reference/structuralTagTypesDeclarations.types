=== tests/cases/conformance/types/structuralTags/structuralTagTypesDeclarations.ts ===
export type Downcased = string & tag {downcased: void};
>Downcased : Downcased
>downcased : void

export function downcaseLit<T extends string>(x: T): T & Downcased {
>downcaseLit : <T extends string>(x: T) => T & string & tag { downcased: void; }
>x : T

    return x.toLocaleLowerCase() as T & Downcased;
>x.toLocaleLowerCase() as T & Downcased : T & string & tag { downcased: void; }
>x.toLocaleLowerCase() : string
>x.toLocaleLowerCase : (locales?: string | string[]) => string
>x : T
>toLocaleLowerCase : (locales?: string | string[]) => string
}
const a = "ok";
>a : "ok"
>"ok" : "ok"

export const c = downcaseLit(a); // no visibility error, tag reproduced structurally
>c : "ok" & tag { downcased: void; }
>downcaseLit(a) : "ok" & tag { downcased: void; }
>downcaseLit : <T extends string>(x: T) => T & string & tag { downcased: void; }
>a : "ok"

