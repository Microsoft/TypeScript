=== tests/cases/conformance/types/nominalBrands/uniqueNominalBrands2.ts ===
export type Paired = {
>Paired : Paired

    x: unique number;
>x : number & unique unknown

    y: unique number;
>y : number & unique unknown

};


export function isPaired(x: {x: number, y: number}): x is Paired {
>isPaired : (x: { x: number; y: number; }) => x is Paired
>x : { x: number; y: number; }
>x : number
>y : number

    return true;
>true : true
}

export function makePair(x: number, y: number): Paired {
>makePair : (x: number, y: number) => Paired
>x : number
>y : number

    return {x, y} as Paired;
>{x, y} as Paired : Paired
>{x, y} : { x: number; y: number; }
>x : number
>y : number
}

const a = makePair(0, 0);
>a : Paired
>makePair(0, 0) : Paired
>makePair : (x: number, y: number) => Paired
>0 : 0
>0 : 0

const b = {x: 0, y: 0};
>b : { x: number; y: number; }
>{x: 0, y: 0} : { x: number; y: number; }
>x : number
>0 : 0
>y : number
>0 : 0

a.x = a.y; // err
>a.x = a.y : number & unique unknown
>a.x : number & unique unknown
>a : Paired
>x : number & unique unknown
>a.y : number & unique unknown
>a : Paired
>y : number & unique unknown

a.y = a.x; // err
>a.y = a.x : number & unique unknown
>a.y : number & unique unknown
>a : Paired
>y : number & unique unknown
>a.x : number & unique unknown
>a : Paired
>x : number & unique unknown

a.x = b.y; // err
>a.x = b.y : number
>a.x : number & unique unknown
>a : Paired
>x : number & unique unknown
>b.y : number
>b : { x: number; y: number; }
>y : number

a.y = b.y; // err
>a.y = b.y : number
>a.y : number & unique unknown
>a : Paired
>y : number & unique unknown
>b.y : number
>b : { x: number; y: number; }
>y : number

a.x = b.x; // err
>a.x = b.x : number
>a.x : number & unique unknown
>a : Paired
>x : number & unique unknown
>b.x : number
>b : { x: number; y: number; }
>x : number

a.y = b.x; // err
>a.y = b.x : number
>a.y : number & unique unknown
>a : Paired
>y : number & unique unknown
>b.x : number
>b : { x: number; y: number; }
>x : number

