=== tests/cases/compiler/throwType_function_return.ts ===
function checkedDivide<T extends number>(x: T): T extends 0 ? throw 'Cannot divided by 0' : number {
>checkedDivide : Symbol(checkedDivide, Decl(throwType_function_return.ts, 0, 0))
>T : Symbol(T, Decl(throwType_function_return.ts, 0, 23))
>x : Symbol(x, Decl(throwType_function_return.ts, 0, 41))
>T : Symbol(T, Decl(throwType_function_return.ts, 0, 23))
>T : Symbol(T, Decl(throwType_function_return.ts, 0, 23))

    if (x === 0) throw new Error('')
>x : Symbol(x, Decl(throwType_function_return.ts, 0, 41))
>Error : Symbol(Error, Decl(lib.es5.d.ts, --, --), Decl(lib.es5.d.ts, --, --))

    return 5 / x
>x : Symbol(x, Decl(throwType_function_return.ts, 0, 41))
}
checkedDivide(0)
>checkedDivide : Symbol(checkedDivide, Decl(throwType_function_return.ts, 0, 0))

checkedDivide(1)
>checkedDivide : Symbol(checkedDivide, Decl(throwType_function_return.ts, 0, 0))

const theAnswerToEverything = <T>(x: T): T extends 42 ? T : throw "Wrong" => x
>theAnswerToEverything : Symbol(theAnswerToEverything, Decl(throwType_function_return.ts, 7, 5))
>T : Symbol(T, Decl(throwType_function_return.ts, 7, 31))
>x : Symbol(x, Decl(throwType_function_return.ts, 7, 34))
>T : Symbol(T, Decl(throwType_function_return.ts, 7, 31))
>T : Symbol(T, Decl(throwType_function_return.ts, 7, 31))
>T : Symbol(T, Decl(throwType_function_return.ts, 7, 31))
>x : Symbol(x, Decl(throwType_function_return.ts, 7, 34))

theAnswerToEverything(42 as const)
>theAnswerToEverything : Symbol(theAnswerToEverything, Decl(throwType_function_return.ts, 7, 5))

theAnswerToEverything('')
>theAnswerToEverything : Symbol(theAnswerToEverything, Decl(throwType_function_return.ts, 7, 5))

